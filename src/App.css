import { useState } from "react";
import "./index.css";

const traitGroups = {
  "Appearance": [
    { label: "Face", max: 20 },
    { label: "Hair", max: 10 },
    { label: "Legs", max: 10 },
    { label: "Body Proportion", max: 10 }
  ],
  "Personality & Mind": [
    { label: "Intelligence", max: 15 },
    { label: "Humor", max: 15 },
    { label: "Confidence", max: 10 },
    { label: "Empathy / Kindness", max: 10 },
    { label: "Communication", max: 10 }
  ],
  "Lifestyle & Values": [
    { label: "Ambition / Drive", max: 10 },
    { label: "Independence / Responsibility", max: 10 },
    { label: "Mental / Physical Health", max: 10 },
    { label: "Hygiene", max: 10 }
  ],
  "Wildcard Bonus": [
    { label: "Wildcard Bonus", max: 25 }
  ]
};

// flatten traits for state indexing
const coreGroups = Object.entries(traitGroups).filter(([k]) => k !== "Wildcard Bonus");
const wildcardGroup = traitGroups["Wildcard Bonus"];
const coreTraits = coreGroups.flatMap(([, traits]) => traits);
const allTraits = [...coreTraits, ...wildcardGroup];

function getTier(score) {
  if (score >= 150) return "God Tier — Marry her immediately.";
  if (score >= 140) return "Elite — Too good to be true, investigate further.";
  if (score >= 120) return "Exceptional — A rare gem, lock that down.";
  if (score >= 90)  return "High Quality — Built different in all the right ways.";
  if (score >= 50)  return "Average — There’s potential!";
  return "Rough — Probably not the one for you.";
}

export default function App() {
  const [scores, setScores] = useState(Array(allTraits.length).fill(0));

  const coreTotal = scores.slice(0, coreTraits.length).reduce((s, v) => s + Number(v), 0);
  const bonus = scores[allTraits.length - 1];
  const tier   = getTier(coreTotal);

  const handleChange = (index, value) => {
    const updated = [...scores];
    updated[index] = value;
    setScores(updated);
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white py-10 px-4 font-sans">
      <h1 className="text-3xl font-bold text-center">The FINE Test</h1>
      <p className="text-center text-gray-300 mb-6">Rate each trait below; Wildcard bonus is extra flair.</p>
      <hr className="border-gray-700 mb-6" />

      {/* render core groups first */}
      {coreGroups.map(([groupName, traits]) => (
        <section key={groupName} className="mb-8">
          <h2 className="text-xl font-semibold text-cyan-400 mb-4">{groupName}</h2>
          {traits.map((trait, idx) => {
            const globalIndex = coreTraits.findIndex(t => t.label === trait.label);
            const value = scores[globalIndex];
            const pct = (value / trait.max) * 100;
            const color = pct <= 20 ? "#ef4444" : pct <= 50 ? "#facc15" : "#22c55e";
            return (
              <div key={trait.label} className="mb-4">
                <label className="block text-sm font-medium mb-1">
                  {trait.label} ({value}/{trait.max})
                </label>
                <input
                  type="range"
                  min="0"
                  max={trait.max}
                  value={value}
                  onChange={e => handleChange(globalIndex, e.target.value)}
                  className="w-full h-2 rounded-full appearance-none"
                  style={{background:`linear-gradient(to right, ${color} ${pct}%, #1f2937 ${pct}%)`}}
                />
              </div>
            );
          })}
        </section>
      ))}

      {/* Wildcard section */}
      <section className="mb-8">
        <h2 className="text-xl font-semibold text-purple-400 mb-4">Wildcard Bonus</h2>
        <div className="mb-4">
          <label className="block text-sm font-medium mb-1">
            Wildcard Bonus ({bonus}/{wildcardGroup[0].max})
          </label>
          <input
            type="range"
            min="0"
            max={wildcardGroup[0].max}
            value={bonus}
            onChange={e => handleChange(allTraits.length - 1, e.target.value)}
            className="w-full h-2 rounded-full appearance-none bg-gradient-to-r from-indigo-500 to-pink-500"
          />
        </div>
      </section>

      <hr className="border-gray-700 my-6" />

      <div className="text-center space-y-1">
        <p className="text-2xl font-bold">Core Score: {coreTotal} / 150</p>
        <p className="text-lg text-purple-300">Wildcard Bonus: +{bonus}</p>
        <p className="text-xl mt-2 text-cyan-300 font-semibold">{tier}</p>
      </div>
    </div>
  );
}
